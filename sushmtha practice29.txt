Practise tasks: Mar 29
DSA
1. Given a binary tree, write an iterative and recursive solution to traverse the tree
using inorder traversal.
#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void inorder(Node* root)
{
    if (root == nullptr) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
 
int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
       inorder(root);
    return 0;
}

4 2 1 7 5 8 3 6 

ITERATION

#include <iostream>
#include <stack>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void inorderIterative(Node* root)
{
    stack<Node*> stack;
    Node* curr = root;
    while (!stack.empty() || curr != nullptr)
    {
        if (curr != nullptr)
        {
            stack.push(curr);
            curr = curr->left;
        }
        else {
            curr = stack.top();
            stack.pop();
            cout << curr->data << " ";
 
            curr = curr->right;
        }
    }
}
int main()
{
    Node* root = new Node(9);
    root->left = new Node(8);
    root->right = new Node(7);
    root->left->left = new Node(6);
    root->right->left = new Node(5);
    root->right->right = new Node(4);
    root->right->left->left = new Node(3);
    root->right->left->right = new Node(2);
    inorderIterative(root);
    return 0;
}

6 8 9 3 5 2 7 4 


2. Given a binary tree, write an iterative and recursive solution to traverse the tree
using preorder traversal.
RECURSION

#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void preorder(Node* root)
{
    if (root == nullptr) {
        return;
    }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}
int main()
{
    Node* root = new Node(6);
    root->left = new Node(2);
    root->right = new Node(8);
    root->left->left = new Node(4);
    root->right->left = new Node(3);
    root->right->right = new Node(7);
    root->right->left->left = new Node(9);
    root->right->left->right = new Node(1);
    preorder(root);
    return 0;
}

6 2 4 8 3 9 1 7 

ITERATION
#include <iostream>
#include <stack>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void preorderIterative(Node* root)
{
    if (root == nullptr)
    return;
    stack<Node*> stack;
    stack.push(root);
    while (!stack.empty())
    {
        Node* curr = stack.top();
        stack.pop();
        cout << curr->data << " ";
        if (curr->right) {
            stack.push(curr->right);
        }
        if (curr->left) {
            stack.push(curr->left);
        }
    }
}
int main()
{
    Node* root = new Node(8);
    root->left = new Node(2);
    root->right = new Node(6);
    root->left->left = new Node(3);
    root->right->left = new Node(5);
    root->right->right = new Node(1);
    root->right->left->left = new Node(9);
    root->right->left->right = new Node(4);
    preorderIterative(root);
    return 0;
}

8 2 3 6 5 9 4 1 


3. Given a binary tree, write an iterative and recursive solution to traverse the tree
using postorder traversal.

RECURSSION


#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void postorder(Node* root)
{
    if (root == nullptr) {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}
int main()
{
    Node* root = new Node(6);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(7);
    root->right->left = new Node(5);
    root->right->right = new Node(9);
    root->right->left->left = new Node(1);
    root->right->left->right = new Node(8);
    postorder(root);
    return 0;
}

7 2 1 8 5 9 3 6 

ITERATION

#include <iostream>
#include <stack>
using namespace std;
 

struct Node
{
    int data;
    Node *left, *right;
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void postorderIterative(Node* root)
{
    if (root == nullptr) {
        return;
    }
    stack<Node*> s;
    s.push(root);
    stack<int> out;
    while (!s.empty())
    {
        Node* curr = s.top();
        s.pop();
        out.push(curr->data);
        if (curr->left) {
            s.push(curr->left);
        }
        if (curr->right) {
            s.push(curr->right);
        }
    }
    while (!out.empty())
    {
        cout << out.top() << " ";
        out.pop();
    }
}
int main()
{
    Node* root = new Node(1);
    root->left = new Node(3);
    root->right = new Node(2);
    root->left->left = new Node(6);
    root->right->left = new Node(4);
    root->right->right = new Node(5);
    root->right->left->left = new Node(8);
    root->right->left->right = new Node(9);
    postorderIterative(root);
    return 0;
}

6 3 8 9 4 5 2 1 